{"version":3,"sources":["assets/js/index.js"],"names":["Geometry","position","x","y","width","height","color","velocityX","velocityY","gravity","randomGeometry","dt","ctx","fillStyle","beginPath","arc","Math","PI","closePath","fill","fillRect","font","fillText","geometryFigures","length","getRandomArbitrary","min","max","random","randomColor","round","oldTime","canvasWidth","canvasHeight","Array","canvas","document","getElementById","getContext","animate","ts","clearRect","i","e","update","render","requestAnimationFrame","devicePixelRatio","style","addEventListener","randRadius","positionX","offsetX","positionY","offsetY","figure","push"],"mappings":"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","file":"js.ff2cf540.js","sourceRoot":"..\\src","sourcesContent":["import '../css/styles.less';\r\n\r\nclass Geometry {\r\n    constructor({\r\n        position = {\r\n            x: 0,\r\n            y: 0\r\n        },\r\n        width = 0,\r\n        height = 0,\r\n        color = 0,\r\n        velocityX = 0,\r\n        velocityY = 0,\r\n        gravity = 0,\r\n        randomGeometry = 0.5\r\n    }) {\r\n        this.position = position;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.color = color;\r\n        this.velocityX = velocityX;\r\n        this.velocityY = velocityY;\r\n        this.gravity = gravity;\r\n        this.randomGeometry = randomGeometry;\r\n    }\r\n\r\n    update(dt) {\r\n        this.velocityY += this.gravity * dt;\r\n        this.position.x += this.velocityX * dt;\r\n        this.position.y += this.velocityY * dt;\r\n    }\r\n\r\n    render() {\r\n        ctx.fillStyle = this.color;\r\n        if (this.randomGeometry < 0.5) {\r\n            ctx.beginPath();\r\n            ctx.arc(this.position.x, this.position.y, this.height, 0, 2 * Math.PI);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        } else {\r\n            ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\r\n        }\r\n        \r\n        ctx.font = '400 20px Roboto';\r\n        ctx.fillStyle = 'red';\r\n        ctx.fillText(`${geometryFigures.length}`, 10, 25);\r\n    }\r\n}\r\n\r\nconst getRandomArbitrary = (min, max) => {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nconst randomColor = () => {\r\n    return `rgb(${Math.round(Math.random()) * 255}, \r\n                ${Math.round(Math.random()) * 255}, \r\n                ${Math.round(Math.random()) * 255})`;\r\n}\r\n\r\nlet oldTime = 0;\r\nconst canvasWidth = 512;\r\nconst canvasHeight = 512;\r\nlet gravity = 100;\r\nconst geometryFigures = new Array;\r\nconst canvas = document.getElementById('canvas');\r\nconst ctx = canvas.getContext('2d');\r\n\r\ncanvas.width = canvasWidth * devicePixelRatio;\r\ncanvas.height = canvasHeight * devicePixelRatio;\r\ncanvas.style.width = `${canvasWidth}px`;\r\ncanvas.style.height = `${canvasHeight}px`;\r\n\r\nrequestAnimationFrame(animate);\r\n\r\nfunction animate(ts) {\r\n    ts /= 1000;\r\n    const dt = ts - oldTime;\r\n    oldTime = ts;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    for (let i = 0; i <= geometryFigures.length - 1; i++) {\r\n        let e = geometryFigures[i];\r\n        e.update(dt);\r\n\r\n        if (e.position.y + e.height >= canvas.height) {\r\n            e.velocityX = (Math.random() * 2 - 1) * 150;\r\n            e.velocityY = Math.random() * -300 - 20;\r\n        }\r\n\r\n        // circle left border out of bounds bounce back fix\r\n        if (e.randomGeometry < 0.5) {\r\n            if (e.position.x - e.width < 0) {\r\n                e.velocityX *= -1;\r\n            } else if (e.position.x + e.width >= canvas.width) {\r\n                e.velocityX *= -1;\r\n            }\r\n            if (e.position.y - e.height < 0) {\r\n                e.velocityY *= -1;\r\n            }\r\n        } else {\r\n            if (e.position.x < 0) {\r\n                e.velocityX *= -1;\r\n            } else if (e.position.x + e.width >= canvas.width) {\r\n                e.velocityX *= -1;\r\n            }\r\n            if (e.position.y < 0) {\r\n                e.velocityY *= -1;\r\n            }\r\n        }\r\n\r\n        \r\n\r\n        e.render(ctx);\r\n    }\r\n\r\n    requestAnimationFrame(animate);\r\n}\r\n\r\n\r\ncanvas.addEventListener('mousedown', e => {\r\n    const randRadius = getRandomArbitrary(10, 30);\r\n    let positionX = e.offsetX;\r\n    let positionY = e.offsetY;\r\n\r\n    // click canvas border object create out of bounds fix\r\n    if (positionY - randRadius < 0) {\r\n        positionY = randRadius + 1;\r\n    } else if (positionY + randRadius / 2 > canvas.height) {\r\n        positionY = canvas.height - randRadius + 1;\r\n    }\r\n\r\n    if (positionX - randRadius < 0) {\r\n        positionX = randRadius + 1;\r\n    } else if (positionX + randRadius / 2 > canvas.width) {\r\n        positionX = canvas.width - randRadius + 1;\r\n    }\r\n\r\n\r\n    const figure = new Geometry({\r\n        position: {\r\n            x: positionX,\r\n            y: positionY\r\n        },\r\n        width: randRadius,\r\n        height: randRadius,\r\n        color: randomColor(),\r\n        velocityX: getRandomArbitrary(-200, 200),\r\n        velocityY: getRandomArbitrary(-200, 200),\r\n        gravity: gravity,\r\n        randomGeometry: Math.random()\r\n    })\r\n\r\n    geometryFigures.push(figure);\r\n})"]}